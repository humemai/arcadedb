{"config":{"lang":["en"],"separator":"[\\s\\-,:!=\\[\\]()\"/]+|(?!\\b)(?=[A-Z][a-z])|\\.(?!\\d)|&[lg]t;","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"ArcadeDB Python Bindings","text":"<ul> <li> <p> Production Ready</p> <p>Native Python bindings for ArcadeDB with full test coverage</p> <p>Status: \u2705 Production Ready | Tests: 41/41 Passing (100%)</p> </li> <li> <p> Pure Python API</p> <p>Pythonic interface to ArcadeDB's multi-model database</p> <p> Quick Start</p> </li> <li> <p> Multi-Model Database</p> <p>Graph, Document, Key/Value, Vector, Time Series in one database</p> <p> Learn More</p> </li> <li> <p> High Performance</p> <p>Direct JVM integration via JPype for maximum speed</p> <p> Architecture</p> </li> </ul>"},{"location":"#what-is-arcadedb","title":"What is ArcadeDB?","text":"<p>ArcadeDB is a next-generation multi-model database that supports:</p> <ul> <li>Graph: Native property graphs with vertices and edges</li> <li>Document: Schema-less JSON documents</li> <li>Key/Value: Fast key-value pairs</li> <li>Vector: Embeddings with HNSW similarity search</li> <li>Time Series: Temporal data with efficient indexing</li> <li>Search Engine: Full-text search with Lucene</li> </ul>"},{"location":"#why-python-bindings","title":"Why Python Bindings?","text":"<p>These bindings provide native Python access to ArcadeDB's full capabilities:</p> <ul> <li>Embedded Mode: Run database directly in your Python process (no external server)</li> <li>Server Mode: Optional HTTP server with Studio web UI for development</li> <li>Multiple Query Languages: SQL, Cypher, Gremlin (full distribution), MongoDB syntax</li> <li>ACID Transactions: Full transactional guarantees</li> <li>Type Safety: Pythonic API with proper error handling</li> </ul>"},{"location":"#features","title":"Features","text":"<p>Core Features</p> <ul> <li>\ud83d\ude80 Embedded Mode - Direct database access in Python process</li> <li>\ud83c\udf10 Server Mode - Optional HTTP server with Studio UI</li> <li>\ud83d\udce6 Self-contained - All JARs bundled, just needs JRE</li> <li>\ud83d\udd04 Multi-model - Graph, Document, Key/Value, Vector</li> <li>\ud83d\udd0d Multiple languages - SQL, Cypher, Gremlin, MongoDB</li> </ul> <p>Advanced Features</p> <ul> <li>\u26a1 High performance - Direct JVM integration via JPype</li> <li>\ud83d\udd12 ACID transactions - Full transaction support</li> <li>\ud83c\udfaf Vector storage - HNSW indexing for embeddings</li> <li>\ud83d\udce5 Data import - CSV, JSON, JSONL, Neo4j importers</li> <li>\ud83d\udd0e Full-text search - Lucene integration</li> <li>\ud83d\uddfa\ufe0f Geospatial - JTS for spatial queries</li> </ul>"},{"location":"#quick-example","title":"Quick Example","text":"<pre><code>import arcadedb_embedded as arcadedb\n\n# Create database (context manager for automatic cleanup)\nwith arcadedb.create_database(\"/tmp/mydb\") as db:\n    # Create schema\n    db.command(\"sql\", \"CREATE DOCUMENT TYPE Person\")\n\n    # Insert data (requires transaction)\n    with db.transaction():\n        db.command(\"sql\", \"INSERT INTO Person SET name = 'Alice', age = 30\")\n\n    # Query data\n    result = db.query(\"sql\", \"SELECT FROM Person WHERE age &gt; 25\")\n    for record in result:\n        print(f\"Name: {record.get_property('name')}\")\n</code></pre> <p>Resource Management</p> <p>Always use context managers (<code>with</code> statements) for automatic resource cleanup!</p>"},{"location":"#package-coverage","title":"Package Coverage","text":"<p>These bindings provide ~85% coverage of ArcadeDB's Java API, focusing on features most relevant to Python developers:</p> Module Coverage Description Core Operations \u2705 100% Database, queries, transactions Server Mode \u2705 100% HTTP server, Studio UI Vector Search \u2705 100% HNSW indexing, similarity search Data Import \u2705 100% CSV, JSON, JSONL, Neo4j Graph API \u26a0\ufe0f 60% Basic graph operations (Python-relevant subset) Gremlin \u26a0\ufe0f 70% Query execution (full dist only) <p>See Java API Coverage for detailed comparison.</p>"},{"location":"#distribution-options","title":"Distribution Options","text":"<p>Choose the package that fits your needs:</p> Distribution Package Name Size What's Included Studio UI Headless <code>arcadedb-embedded-headless</code> ~94MB SQL, Cypher, PostgreSQL, HTTP \u274c Minimal <code>arcadedb-embedded-minimal</code> ~97MB Headless + Studio UI \u2705 Full <code>arcadedb-embedded</code> ~158MB Minimal + Gremlin, GraphQL \u2705 <p>All distributions use the same import:</p> <pre><code>import arcadedb_embedded as arcadedb\n</code></pre> <p>Choosing a Distribution</p> <ul> <li>Headless: Recommended for production - core database functionality</li> <li>Minimal: Adds Studio UI (~2MB) - great for development</li> <li>Full: Adds Gremlin (~64MB) + GraphQL - only if you need those query languages</li> </ul>"},{"location":"#getting-started","title":"Getting Started","text":"<ul> <li> <p> Install</p> <p>Installation instructions for all three distributions</p> </li> <li> <p> Quick Start</p> <p>Get up and running in 5 minutes</p> </li> <li> <p> User Guide</p> <p>Comprehensive guide to all features</p> </li> <li> <p> API Reference</p> <p>Detailed API documentation</p> </li> </ul>"},{"location":"#requirements","title":"Requirements","text":"<ul> <li>Python: 3.8 - 3.12</li> <li>Java: JRE 11+ (OpenJDK recommended)</li> <li>JPype: 1.5.0+ (automatically installed)</li> </ul> <p>Java Required</p> <p>You need Java Runtime Environment (JRE) installed. The wheels bundle all JAR files, but need a JVM to run them.</p> <pre><code># Ubuntu/Debian\nsudo apt-get install default-jre-headless\n\n# macOS\nbrew install openjdk\n\n# Windows\n# Download from https://adoptium.net/\n</code></pre>"},{"location":"#community-support","title":"Community &amp; Support","text":"<ul> <li>GitHub: humemai/arcadedb</li> <li>Issues: Report bugs</li> <li>PyPI: arcadedb-embedded-headless</li> <li>ArcadeDB Docs: docs.arcadedb.com</li> </ul>"},{"location":"#license","title":"License","text":"<p>Apache License 2.0 - see LICENSE</p>"},{"location":"java-api-coverage/","title":"Java API Coverage","text":""},{"location":"java-api-coverage/#java-api-coverage-analysis","title":"\ufffd Java API Coverage Analysis","text":"<p>This section provides a comprehensive comparison of the ArcadeDB Java API and what's been implemented in the Python bindings.</p>"},{"location":"java-api-coverage/#executive-summary","title":"Executive Summary","text":"<p>Overall Coverage: ~40-45% of Java API</p> <p>The Python bindings provide excellent coverage for common use cases (~85% of typical operations), but limited coverage of advanced Java-specific APIs (~15-20% of advanced features).</p>"},{"location":"java-api-coverage/#coverage-by-category","title":"Coverage by Category","text":"Category Coverage Status Core Database Operations 85% \u2705 Excellent Query Execution 100% \u2705 Complete Transactions 90% \u2705 Excellent Server Mode 70% \u2705 Good Data Import 30% \u26a0\ufe0f Limited Graph API 10% \u274c Minimal Schema API 0% \u274c Not Implemented Index Management 5% \u274c Minimal Advanced Features 5% \u274c Minimal"},{"location":"java-api-coverage/#detailed-coverage","title":"Detailed Coverage","text":""},{"location":"java-api-coverage/#1-core-database-operations-85","title":"1. Core Database Operations - 85%","text":"<p>DatabaseFactory: - \u2705 <code>create()</code> - Create new database - \u2705 <code>open()</code> - Open existing database - \u2705 <code>exists()</code> - Check if database exists - \u274c <code>setAutoTransaction()</code> - Not exposed (use config) - \u274c <code>setSecurity()</code> - Not exposed (server-managed)</p> <p>Database: - \u2705 <code>query(language, query, *args)</code> - Full support for all query languages - \u2705 <code>command(language, command, *args)</code> - Full support for write operations - \u2705 <code>begin()</code>, <code>commit()</code>, <code>rollback()</code> - Full transaction support - \u2705 <code>transaction()</code> - Python context manager (enhancement) - \u2705 <code>newDocument(type)</code>, <code>newVertex(type)</code> - Record creation - \u2705 <code>getName()</code>, <code>getDatabasePath()</code>, <code>isOpen()</code>, <code>close()</code> - Database info - \u274c <code>scanType()</code>, <code>scanBucket()</code> - Use SQL SELECT instead - \u274c <code>lookupByKey()</code> - Use SQL WHERE clause instead - \u274c <code>async()</code> - Async operations not exposed</p>"},{"location":"java-api-coverage/#2-query-execution-100","title":"2. Query Execution - 100%","text":"<p>All query languages fully supported: - \u2705 SQL - \u2705 Cypher - \u2705 Gremlin (full distribution) - \u2705 MongoDB query syntax - \u2705 GraphQL (full distribution)</p> <p>ResultSet &amp; Results: - \u2705 Pythonic iteration (<code>__iter__</code>, <code>__next__</code>) - \u2705 <code>has_next()</code>, <code>next()</code> - \u2705 <code>get_property()</code>, <code>has_property()</code>, <code>get_property_names()</code> - \u2705 <code>to_json()</code>, <code>to_dict()</code> (Python enhancement)</p>"},{"location":"java-api-coverage/#3-graph-api-10","title":"3. Graph API - 10%","text":"<p>Most graph operations done via SQL/Cypher instead of direct API: - \u2705 <code>db.new_vertex(type)</code> - Vertex creation - \u274c Vertex methods (<code>getEdges()</code>, <code>getVertices()</code>, etc.) - Use Cypher/SQL queries - \u274c Edge methods - Use SQL CREATE EDGE or Cypher - \u274c Graph traversal API - Use Cypher MATCH or SQL traversal</p> <p>Workaround via Queries: <pre><code># Create edges via SQL\ndb.command(\"sql\", \"\"\"\n    CREATE EDGE Follows\n    FROM (SELECT FROM User WHERE id = 1)\n    TO (SELECT FROM User WHERE id = 2)\n\"\"\")\n\n# Or via Cypher\ndb.command(\"cypher\", \"\"\"\n    MATCH (a:User {id: 1}), (b:User {id: 2})\n    CREATE (a)-[:FOLLOWS]-&gt;(b)\n\"\"\")\n\n# Traverse via Cypher\nresult = db.query(\"cypher\", \"\"\"\n    MATCH (user:User {name: 'Alice'})-[:FOLLOWS]-&gt;(friend)\n    RETURN friend.name\n\"\"\")\n</code></pre></p>"},{"location":"java-api-coverage/#4-schema-management-0","title":"4. Schema Management - 0%","text":"<p>All schema operations done via SQL DDL: - \u274c No direct Schema API - \u2705 Use SQL: <code>CREATE VERTEX TYPE User</code> - \u2705 Use SQL: <code>CREATE PROPERTY User.email STRING</code> - \u2705 Use SQL: <code>ALTER PROPERTY User.email MANDATORY true</code> - \u2705 Use SQL: <code>DROP TYPE User</code></p>"},{"location":"java-api-coverage/#5-index-management-5","title":"5. Index Management - 5%","text":"<ul> <li>\u2705 Vector indexes via <code>create_vector_index()</code> - High-level Python API</li> <li>\u274c Type indexes - Use SQL: <code>CREATE INDEX ON User (email) UNIQUE</code></li> <li>\u274c Full-text indexes - Use SQL: <code>CREATE INDEX ON Article (content) FULL_TEXT</code></li> <li>\u274c Composite indexes - Use SQL: <code>CREATE INDEX ON User (name, age) NOTUNIQUE</code></li> </ul>"},{"location":"java-api-coverage/#6-server-mode-70","title":"6. Server Mode - 70%","text":"<ul> <li>\u2705 <code>ArcadeDBServer(root_path, config)</code> - Server initialization</li> <li>\u2705 <code>start()</code>, <code>stop()</code> - Server lifecycle</li> <li>\u2705 <code>get_database()</code>, <code>create_database()</code> - Database management</li> <li>\u2705 Context manager support</li> <li>\u2705 <code>get_studio_url()</code>, <code>get_http_port()</code> - Python enhancements</li> <li>\u274c Plugin management - Not exposed</li> <li>\u274c HA/Replication - Not exposed</li> <li>\u274c Security API - Server-managed only</li> </ul>"},{"location":"java-api-coverage/#7-data-import-30-4-of-14-formats","title":"7. Data Import - 30% (4 of 14 formats)","text":"<p>Supported: - \u2705 CSV - <code>import_csv()</code> - \u2705 JSON - <code>import_json()</code> - \u2705 JSONL - <code>import_jsonl()</code> - \u2705 Neo4j - <code>import_neo4j()</code></p> <p>Not Implemented: - \u274c XML, RDF, OrientDB, GloVe, Word2Vec - \u274c TextEmbeddings, GraphImporter - \u274c SQL import via Importer</p>"},{"location":"java-api-coverage/#8-vector-search-80","title":"8. Vector Search - 80%","text":"<ul> <li>\u2705 HNSW index creation - <code>create_vector_index()</code></li> <li>\u2705 NumPy array support - <code>to_java_float_array()</code>, <code>to_python_array()</code></li> <li>\u2705 Similarity search - <code>index.find_nearest()</code></li> <li>\u2705 Add/remove vectors - <code>index.add_vertex()</code>, <code>index.remove_vertex()</code></li> <li>\u2705 Distance functions - cosine, euclidean, inner_product</li> <li>\u2705 HNSW parameters - m, ef, ef_construction</li> </ul>"},{"location":"java-api-coverage/#9-advanced-features-5","title":"9. Advanced Features - 5%","text":"<p>Not Implemented: - \u274c Callbacks &amp; Events (DocumentCallback, RecordCallback, DatabaseEvents) - \u274c Low-Level APIs (WAL, bucket scanning, binary protocol) - \u274c Async operations &amp; parallel queries - \u274c Security management (SecurityManager, user management) - \u274c High Availability (HAServer, replication) - \u274c Custom query engines - \u274c Schema builders &amp; DSL</p>"},{"location":"java-api-coverage/#design-philosophy-query-first-approach","title":"Design Philosophy: Query-First Approach","text":"<p>The Python bindings follow a \"query-first, API-second\" philosophy, which is ideal for Python developers. Instead of exposing every Java object, operations are enabled through:</p> <ul> <li>SQL DDL for schema management</li> <li>Cypher/SQL for graph operations  </li> <li>High-level wrappers for common tasks (transactions, vector search)</li> </ul> <p>This approach is actually cleaner and more maintainable than direct API exposure:</p> <pre><code># Python way (clean):\ndb.command(\"sql\", \"CREATE INDEX ON User (email) UNIQUE\")\ndb.query(\"cypher\", \"MATCH (a)-[:FOLLOWS]-&gt;(b) RETURN b\")\n\n# vs. hypothetical direct API (complex):\nschema = db.getSchema()\ntype = schema.getType(\"User\")\nindex_builder = schema.buildTypeIndex(\"User\", [\"email\"])\nindex = index_builder.withUnique(true).create()\n</code></pre>"},{"location":"java-api-coverage/#use-case-suitability","title":"Use Case Suitability","text":"Use Case Suitable? Notes Embedded database in Python app \u2705 Perfect Core use case Graph analytics with Cypher \u2705 Excellent All query languages work Document store \u2705 Excellent Full SQL support Vector similarity search \u2705 Excellent Native NumPy integration Development with Studio UI \u2705 Excellent Server mode included Data migration (CSV/JSON import) \u2705 Good Most formats covered Real-time event processing \u26a0\ufe0f Limited No async, no callbacks Advanced graph algorithms \u26a0\ufe0f Limited Use Cypher, no direct API Multi-master replication \u274c Not supported Java/Server only Custom query language \u274c Not supported Use built-in languages"},{"location":"java-api-coverage/#conclusion","title":"Conclusion","text":"<p>For 90% of Python developers: These bindings are production-ready and provide everything needed for: - Embedded multi-model database - Graph, document, vector, and time-series data - SQL, Cypher, and Gremlin queries - Development and production deployment</p> <p>Not suitable for: - Applications requiring async/await patterns - Custom database extensions or plugins - Direct manipulation of Graph API objects - High-availability clustering from Python</p> <p>The practical coverage for real-world applications is 85%+, which is excellent. The 40-45% \"total coverage\" number is misleading because it counts low-level Java APIs that Python developers shouldn't use anyway.</p>"},{"location":"java-api-coverage/#future-work","title":"\ufffd\ud83d\udea7 Future Work","text":"<p>This Python binding is actively being developed. Here are the planned improvements:</p>"},{"location":"java-api-coverage/#1-high-level-sql-support-for-vectors","title":"1. High-Level SQL Support for Vectors","text":"<p>Goal: Simplify vector operations with SQL-based API</p> <p>Currently, vector similarity search requires direct interaction with Java APIs (creating HNSW indexes, converting arrays, managing vertices manually). This works but isn't as user-friendly as it could be.</p> <p>Current approach (requires understanding Java internals):</p> <pre><code># Lots of Java API calls\njava_embedding = arcadedb.to_java_float_array(embedding)\nvertex = db._java_db.newVertex(\"Document\")\nvertex.set(\"embedding\", java_embedding)\nindex = db.create_vector_index(...)\n</code></pre> <p>Future approach (with SQL support):</p> <pre><code># Clean SQL-based API\ndb.command(\"sql\", \"\"\"\n    CREATE VECTOR INDEX ON Document(embedding)\n    WITH (dimensions=768, distance='cosine')\n\"\"\")\n\nresult = db.query(\"sql\", \"\"\"\n    SELECT FROM Document\n    WHERE embedding NEAR [0.1, 0.2, ...]\n    LIMIT 10\n\"\"\")\n</code></pre> <p>Once ArcadeDB adds native SQL syntax for vector operations, we'll adapt the Python bindings to expose this cleaner interface.</p>"},{"location":"java-api-coverage/#2-comprehensive-testing-performance-benchmarks","title":"2. Comprehensive Testing &amp; Performance Benchmarks","text":"<p>Goal: Validate stability and performance at scale</p> <p>Current testing covers basic functionality (14/14 tests passing), but we need:</p> <ul> <li>Load testing: Insert/query millions of records</li> <li>Vector performance: Benchmark HNSW search with large datasets (100K+ vectors)</li> <li>Concurrency testing: Multiple transactions, thread safety</li> <li>Memory profiling: Long-running processes, leak detection</li> <li>Platform testing: Verify behavior across Linux, macOS, Windows</li> <li>Python version matrix: Test Python 3.8-3.12</li> </ul> <p>This will ensure production readiness for high-volume applications.</p>"},{"location":"java-api-coverage/#3-upstream-contribution","title":"3. Upstream Contribution","text":"<p>Goal: Merge into official ArcadeDB repository</p> <p>Once the bindings are thoroughly tested and PyPI-ready, we plan to submit a pull request to the official ArcadeDB repository. This will:</p> <ul> <li>Make Python bindings an officially supported feature</li> <li>Ensure long-term maintenance and updates</li> <li>Benefit the broader ArcadeDB community</li> <li>Keep bindings in sync with Java releases</li> </ul> <p>Timeline: Waiting for items 1-3 to be completed and validated before proposing upstream integration.</p>"},{"location":"java-api-coverage/#license","title":"\ud83d\udcdd License","text":"<p>Apache License 2.0</p>"},{"location":"java-api-coverage/#contributing","title":"\ud83d\ude4f Contributing","text":"<p>Contributions welcome! Please:</p> <ol> <li>Fork the repository</li> <li>Create a feature branch</li> <li>Make your changes</li> <li>Run tests: <code>python3 -m pytest tests/ -v</code></li> <li>Submit a pull request</li> </ol>"},{"location":"api/database/","title":"Database API","text":"<p>Under Construction</p> <p>This page is being developed. Check back soon!</p>"},{"location":"api/database/#coming-soon","title":"Coming Soon","text":"<ul> <li><code>Database</code> class reference</li> <li><code>DatabaseFactory</code> methods</li> <li>Query and command methods</li> <li>Transaction management</li> </ul>"},{"location":"api/exceptions/","title":"Exceptions API","text":"<p>Under Construction</p> <p>This page is being developed. Check back soon!</p>"},{"location":"api/exceptions/#coming-soon","title":"Coming Soon","text":"<ul> <li><code>ArcadeDBError</code> exception</li> <li>Error handling patterns</li> <li>Common exceptions</li> </ul>"},{"location":"api/importer/","title":"Importer API","text":"<p>Under Construction</p> <p>This page is being developed. Check back soon!</p>"},{"location":"api/importer/#coming-soon","title":"Coming Soon","text":"<ul> <li><code>Importer</code> class</li> <li>CSV import</li> <li>JSON/JSONL import</li> <li>Neo4j import</li> </ul>"},{"location":"api/results/","title":"Results API","text":"<p>Under Construction</p> <p>This page is being developed. Check back soon!</p>"},{"location":"api/results/#coming-soon","title":"Coming Soon","text":"<ul> <li><code>ResultSet</code> class</li> <li><code>Result</code> class</li> <li>Property access</li> <li>Iteration patterns</li> </ul>"},{"location":"api/server/","title":"Server API","text":"<p>Under Construction</p> <p>This page is being developed. Check back soon!</p>"},{"location":"api/server/#coming-soon","title":"Coming Soon","text":"<ul> <li><code>ArcadeDBServer</code> class</li> <li>Configuration options</li> <li>Start/stop methods</li> <li>Database access</li> </ul>"},{"location":"api/transactions/","title":"Transactions API","text":"<p>Under Construction</p> <p>This page is being developed. Check back soon!</p>"},{"location":"api/transactions/#coming-soon","title":"Coming Soon","text":"<ul> <li><code>TransactionContext</code> class</li> <li>Context manager usage</li> <li>ACID guarantees</li> <li>Error handling</li> </ul>"},{"location":"api/vector/","title":"Vector API","text":"<p>Under Construction</p> <p>This page is being developed. Check back soon!</p>"},{"location":"api/vector/#coming-soon","title":"Coming Soon","text":"<ul> <li><code>VectorIndex</code> class</li> <li>HNSW indexing</li> <li>Similarity search</li> <li>Embedding operations</li> </ul>"},{"location":"development/architecture/","title":"Architecture","text":"<p>Under Construction</p> <p>This page is being developed. Check back soon!</p>"},{"location":"development/architecture/#coming-soon","title":"Coming Soon","text":"<ul> <li>Module structure</li> <li>JPype integration</li> <li>JVM lifecycle</li> <li>Performance considerations</li> </ul>"},{"location":"development/contributing/","title":"Contributing","text":"<p>Under Construction</p> <p>This page is being developed. Check back soon!</p>"},{"location":"development/contributing/#coming-soon","title":"Coming Soon","text":"<ul> <li>Development setup</li> <li>Building from source</li> <li>Coding standards</li> <li>Pull request process</li> </ul> <p>See CONTRIBUTING.md for now.</p>"},{"location":"development/documentation/","title":"Documentation Development","text":"<p>This guide explains how to work with the MkDocs Material documentation for ArcadeDB Python bindings.</p>"},{"location":"development/documentation/#documentation-structure","title":"Documentation Structure","text":"<pre><code>bindings/python/\n\u251c\u2500\u2500 docs/              # Documentation source\n\u2502   \u251c\u2500\u2500 index.md       # Homepage\n\u2502   \u251c\u2500\u2500 getting-started/\n\u2502   \u251c\u2500\u2500 guide/\n\u2502   \u251c\u2500\u2500 api/\n\u2502   \u251c\u2500\u2500 examples/\n\u2502   \u2514\u2500\u2500 development/\n\u251c\u2500\u2500 mkdocs.yml         # MkDocs configuration\n\u2514\u2500\u2500 site/              # Built documentation (gitignored)\n</code></pre>"},{"location":"development/documentation/#local-development","title":"Local Development","text":""},{"location":"development/documentation/#preview-documentation","title":"Preview Documentation","text":"<p>Run a local development server with live reload:</p> <pre><code>cd bindings/python\nmkdocs serve\n</code></pre> <p>Then open: http://127.0.0.1:8000/arcadedb/</p> <p>Any changes to <code>.md</code> files will automatically refresh in your browser!</p>"},{"location":"development/documentation/#build-documentation","title":"Build Documentation","text":"<p>Build the static site to verify there are no errors:</p> <pre><code>mkdocs build --strict\n</code></pre> <p>The built site will be in <code>site/</code> directory.</p>"},{"location":"development/documentation/#check-for-issues","title":"Check for Issues","text":"<pre><code># Check for broken links\nmkdocs build --strict\n\n# Validate configuration\nmkdocs --version\n</code></pre>"},{"location":"development/documentation/#versioned-documentation","title":"Versioned Documentation","text":"<p>Documentation is versioned using mike and automatically deployed when you create release tags.</p>"},{"location":"development/documentation/#how-it-works","title":"How It Works","text":"<ol> <li>Create a GitHub Release with tag like <code>python-X.Y.Z</code></li> <li>GitHub Actions automatically:</li> <li>Builds documentation with MkDocs</li> <li>Deploys version <code>X.Y.Z</code> to GitHub Pages</li> <li>Sets it as the <code>latest</code> version</li> <li> <p>Updates version selector</p> </li> <li> <p>Users can view:</p> </li> <li>Latest stable docs: https://humemai.github.io/arcadedb/</li> <li>Specific version: https://humemai.github.io/arcadedb/X.Y.Z/</li> <li>Version selector in top-right corner</li> </ol>"},{"location":"development/documentation/#deployment-workflow","title":"Deployment Workflow","text":"<p>Automatic deployment (recommended):</p> <pre><code># 1. Make documentation changes on python-embedded branch\n# 2. Build and test wheels\n./build-all.sh headless\npytest\n\n# 3. Commit and push changes\ngit add .\ngit commit -m \"Release version X.Y.Z\"\ngit push origin python-embedded\n\n# 4. Create GitHub Release (creates tag automatically)\ngh release create python-X.Y.Z \\\n  --title \"Python Bindings vX.Y.Z\" \\\n  --notes \"Release notes\"\n\n# \u2705 Docs automatically deploy to:\n# https://humemai.github.io/arcadedb/X.Y.Z/ (versioned)\n# https://humemai.github.io/arcadedb/ (redirects to latest)\n</code></pre> <p>Manual deployment (for testing):</p> <p>You can manually trigger deployment from GitHub Actions:</p> <ol> <li>Go to Actions \u2192 Deploy MkDocs to GitHub Pages</li> <li>Click Run workflow</li> <li>Choose:</li> <li>Version: <code>dev</code> (or any version name)</li> <li>Set as latest: <code>false</code> (to keep as separate version)</li> </ol> <p>This creates a test deployment without affecting the stable docs.</p>"},{"location":"development/documentation/#version-management","title":"Version Management","text":"<p>List all deployed versions:</p> <pre><code>cd bindings/python\nmike list\n</code></pre> <p>Delete a version (requires push access):</p> <pre><code># Replace X.Y.Z with version to delete\nmike delete X.Y.Z --push\n</code></pre> <p>Set a different version as default:</p> <pre><code># Replace X.Y.Z with version to set as default\nmike set-default X.Y.Z --push\n</code></pre>"},{"location":"development/documentation/#version-alignment","title":"Version Alignment","text":"<p>Documentation versions match PyPI package versions:</p> Release Tag Docs Version PyPI Packages <code>python-X.Y.Z</code> <code>X.Y.Z</code> <code>arcadedb-embedded-*==X.Y.Z</code> Example: <code>v25.9.1-python</code> <code>25.9.1</code> <code>arcadedb-embedded-*==25.9.1</code> <p>This ensures users always see documentation matching their installed package version.</p>"},{"location":"development/documentation/#writing-documentation","title":"Writing Documentation","text":""},{"location":"development/documentation/#style-guide","title":"Style Guide","text":"<p>Tone:</p> <ul> <li>Friendly and approachable</li> <li>Use \"you\" to address the reader</li> <li>Keep sentences concise</li> <li>Use active voice</li> </ul> <p>Code Examples:</p> <ul> <li>Show complete, runnable examples</li> <li>Include imports and setup</li> <li>Add comments for complex logic</li> <li>Use realistic variable names</li> </ul> <p>Organization:</p> <ul> <li>Start with simple concepts</li> <li>Build to more complex topics</li> <li>Use clear headings</li> <li>Add navigation hints</li> </ul>"},{"location":"development/documentation/#markdown-features","title":"Markdown Features","text":""},{"location":"development/documentation/#admonitions-callouts","title":"Admonitions (Callouts)","text":"<pre><code>!!! note \"Title (optional)\"\n    This is a note with a custom title.\n\n!!! tip\n    This is a helpful tip.\n\n!!! warning\n    This is a warning.\n\n!!! danger\n    This is a critical warning.\n\n!!! info\n    This is informational.\n\n!!! success\n    This indicates success.\n</code></pre>"},{"location":"development/documentation/#code-blocks-with-tabs","title":"Code Blocks with Tabs","text":"<pre><code>=== \"Python\"\n\n    ```python\n    import arcadedb_embedded as arcadedb\n    ```\n\n=== \"SQL\"\n\n    ```sql\n    SELECT * FROM User;\n    ```\n</code></pre>"},{"location":"development/documentation/#code-block-highlighting","title":"Code Block Highlighting","text":"<pre><code># Line highlighting\n```python hl_lines=\"2 3\"\nimport arcadedb_embedded as arcadedb\ndb = arcadedb.create_database(\"./mydb\")  # (1)!\ndb.close()\n</code></pre> <ol> <li>Creates a new database in the current directory <pre><code>\\```\n\n#### Tables\n\n```markdown\n| Feature | Headless | Minimal | Full |\n|---------|----------|---------|------|\n| SQL | \u2705 Yes | \u2705 Yes | \u2705 Yes |\n| Gremlin | \u274c No | \u274c No | \u2705 Yes |\n</code></pre></li> </ol>"},{"location":"development/documentation/#internal-links","title":"Internal Links","text":"<pre><code>See [Installation Guide](../getting-started/installation.md) for details.\n\nLink to a specific section: [Testing](testing.md#quick-start)\n</code></pre>"},{"location":"development/documentation/#external-links","title":"External Links","text":"<pre><code>Check the [official ArcadeDB docs](https://docs.arcadedb.com) for more.\n</code></pre>"},{"location":"development/documentation/#api-documentation","title":"API Documentation","text":"<p>When documenting API methods, use this structure:</p> <pre><code>## method_name()\n\nBrief one-line description.\n\n**Signature:**\n```python\nmethod_name(param1: type, param2: type = default) -&gt; ReturnType\n\\```\n\n**Parameters:**\n\n- `param1` (type): Description of param1\n- `param2` (type, optional): Description of param2. Defaults to `default`.\n\n**Returns:**\n\n- `ReturnType`: Description of return value\n\n**Raises:**\n\n- `ExceptionType`: When this exception occurs\n\n**Example:**\n```python\nresult = obj.method_name(\"value\", param2=True)\n\\```\n\n**See Also:**\n\n- [Related Method](related.md)\n\\```\n\n## Testing Documentation\n\n### Verify All Links Work\n\n```bash\n# Build with strict mode (fails on warnings)\nmkdocs build --strict\n</code></pre>"},{"location":"development/documentation/#check-mobile-responsiveness","title":"Check Mobile Responsiveness","text":"<p>The Material theme is mobile-responsive by default. Test by:</p> <ol> <li>Run <code>mkdocs serve</code></li> <li>Open in browser</li> <li>Use browser DevTools responsive mode (F12 \u2192 Toggle device toolbar)</li> <li>Test navigation, search, code blocks on mobile sizes</li> </ol>"},{"location":"development/documentation/#test-search","title":"Test Search","text":"<ol> <li>Run <code>mkdocs serve</code></li> <li>Click search icon (or press <code>/</code>)</li> <li>Search for key terms</li> <li>Verify results are relevant</li> </ol>"},{"location":"development/documentation/#continuous-integration","title":"Continuous Integration","text":"<p>Documentation is automatically validated on every push via GitHub Actions:</p> <ul> <li>Build check: Ensures documentation builds without errors</li> <li>Version deployment: Deploys on tagged releases</li> <li>Link validation: Checks for broken links (TODO)</li> </ul>"},{"location":"development/documentation/#troubleshooting","title":"Troubleshooting","text":""},{"location":"development/documentation/#config-file-not-found","title":"\"Config file not found\"","text":"<p>Make sure you're in <code>bindings/python/</code> directory:</p> <pre><code>cd bindings/python\nmkdocs serve\n</code></pre>"},{"location":"development/documentation/#module-not-found-error","title":"\"Module not found\" error","text":"<p>Install dependencies:</p> <pre><code>pip install mkdocs-material mkdocs-git-revision-date-localized-plugin\n</code></pre>"},{"location":"development/documentation/#changes-not-appearing","title":"Changes not appearing","text":"<ol> <li>Check file is saved</li> <li>Check terminal for build errors</li> <li>Hard refresh browser (Ctrl+Shift+R)</li> <li>Restart <code>mkdocs serve</code></li> </ol>"},{"location":"development/documentation/#version-selector-not-showing","title":"Version selector not showing","text":"<p>The version selector appears after deploying at least 2 versions with mike:</p> <pre><code># Example: Deploy two versions\nmike deploy X.Y.Z latest\nmike deploy dev\n</code></pre>"},{"location":"development/documentation/#next-steps","title":"Next Steps","text":"<ul> <li>Contributing Guide - How to contribute</li> <li>Testing Guide - Running tests</li> <li>MkDocs Material Reference - Full documentation</li> <li>mike Documentation - Versioning tool</li> </ul>"},{"location":"development/release/","title":"Release Workflow","text":"<p>Complete workflow for releasing ArcadeDB Python bindings to PyPI with versioned documentation.</p>"},{"location":"development/release/#prerequisites","title":"Prerequisites","text":"<ul> <li>Push access to the repository</li> <li>PyPI environments configured in GitHub (pypi-headless, pypi-minimal, pypi-full)</li> <li>Trusted publisher setup on PyPI (automatic authentication)</li> </ul>"},{"location":"development/release/#release-checklist","title":"Release Checklist","text":""},{"location":"development/release/#1-prepare-release","title":"1. Prepare Release","text":"<p>On <code>python-embedded</code> branch:</p> <ul> <li> Version is already set in <code>pom.xml</code> (e.g., <code>X.Y.Z-SNAPSHOT</code>)</li> <li> Run full test suite across all distributions</li> <li> Update <code>CHANGELOG.md</code> or prepare release notes</li> <li> Update documentation if needed</li> <li> Commit all changes</li> </ul> <pre><code>cd bindings/python\n\n# Build all distributions\n./build-all.sh headless\n./build-all.sh minimal\n./build-all.sh full\n\n# Test each distribution\npip install dist/arcadedb_embedded_headless-*.whl\npytest  # 34 passed, 7 skipped\n\npip install --force-reinstall dist/arcadedb_embedded_minimal-*.whl\npytest  # 38 passed, 3 skipped\n\npip install --force-reinstall dist/arcadedb_embedded_full-*.whl\npytest  # 41 passed, 0 skipped\n</code></pre> <p>Note: Version is automatically extracted from <code>pom.xml</code> by <code>extract_version.py</code> during build. The <code>-SNAPSHOT</code> suffix is converted to <code>.dev0</code> for PEP 440 compliance.</p>"},{"location":"development/release/#2-create-github-release","title":"2. Create GitHub Release","text":"<p>Instead of pushing tags manually, create a GitHub Release which automatically creates the tag and triggers deployments.</p> <p>Option A: Using GitHub Web UI (Recommended)</p> <ol> <li>Go to Releases</li> <li>Click Draft a new release</li> <li> <p>Click Choose a tag dropdown</p> </li> <li> <p>Click Choose a tag \u2192 Type <code>vX.Y.Z-python</code> \u2192 Create new tag</p> </li> <li>Target: <code>python-embedded</code></li> <li>Release title: <code>Python release vX.Y.Z</code></li> <li>Description/Release notes:</li> </ol> <pre><code>## What's New\n\n- Feature: Description\n- Fix: Description\n- Docs: Description\n\n## Installation\n\npip install arcadedb-embedded-headless\n\n## Documentation\n\nhttps://humemai.github.io/arcadedb/\n\n## Test Results\n\n- Headless: 34/41 passed (7 skipped)\n- Minimal: 38/41 passed (3 skipped)\n- Full: 41/41 passed\n</code></pre> <ol> <li>Click Publish release (or Save as draft to test first)</li> </ol> <p>Option B: Using GitHub CLI</p> <pre><code># Commit final changes\ngit add .\ngit commit -m \"Release Python bindings vX.Y.Z\"\ngit push origin python-embedded\n\n# Create annotated tag\ngit tag -a vX.Y.Z-python -m \"Python release vX.Y.Z\"\ngit push origin vX.Y.Z-python\n\n# Create release from tag\ngh release create vX.Y.Z-python \\\n  --target python-embedded \\\n  --title \"Python release vX.Y.Z\" \\\n  --notes \"## What's New\n\n- Feature: Description\n- Fix: Description\n</code></pre>"},{"location":"development/release/#installation","title":"Installation","text":"<pre><code>pip install arcadedb-embedded-headless\n</code></pre>"},{"location":"development/release/#documentation","title":"Documentation","text":"<p>https://humemai.github.io/arcadedb/</p>"},{"location":"development/release/#test-results","title":"Test Results","text":"<ul> <li>Headless: 34/41 passed</li> <li>Minimal: 38/41 passed  </li> <li>Full: 41/41 passed\"</li> </ul> <p>What happens automatically:</p> <ul> <li>\u2705 Git tag <code>vX.Y.Z-python</code> is created (annotated tag)</li> <li>\u2705 PyPI workflow builds and uploads all 3 distributions</li> <li>\u2705 Docs workflow deploys versioned documentation</li> </ul>"},{"location":"development/release/#3-monitor-github-actions","title":"3. Monitor GitHub Actions","text":"<p>Two workflows trigger automatically when you publish the release:</p> <p>PyPI Deployment (<code>.github/workflows/release-python-packages.yml</code>):</p> <ol> <li>Builds all 3 distributions in parallel (using Docker)</li> <li>Publishes to PyPI:</li> <li><code>arcadedb-embedded-headless</code></li> <li><code>arcadedb-embedded-minimal</code></li> <li><code>arcadedb-embedded</code> (full)</li> </ol> <p>Documentation Deployment (<code>.github/workflows/deploy-python-docs.yml</code>):</p> <ol> <li>Extracts version from release tag (e.g., <code>vX.Y.Z-python</code> \u2192 <code>X.Y.Z</code>)</li> <li>Builds documentation with MkDocs + mike</li> <li>Deploys to GitHub Pages with version number</li> <li>Sets as <code>latest</code> version</li> <li>Updates version selector dropdown</li> </ol> <p>Check progress:</p> <ul> <li>Go to GitHub \u2192 Actions tab</li> <li>Monitor both workflows</li> <li>Check for any failures</li> <li>Typical duration: 10-15 minutes total</li> </ul>"},{"location":"development/release/#4-verify-deployment","title":"4. Verify Deployment","text":"<p>PyPI Packages:</p> <pre><code># Check packages are live (replace VERSION with your version)\npip index versions arcadedb-embedded-headless\n\n# Test installation\npip install arcadedb-embedded-headless\npython -c \"import arcadedb_embedded as arcadedb; print(arcadedb.__version__)\"\n</code></pre> <p>Documentation:</p> <p>Visit: - Latest: https://humemai.github.io/arcadedb/ - Versioned: https://humemai.github.io/arcadedb/VERSION/ (replace VERSION)</p> <p>Check: - [ ] Version selector shows your version as <code>(latest)</code> - [ ] All pages load correctly - [ ] Search works - [ ] Code examples render properly - [ ] Links work (internal and external)</p>"},{"location":"development/release/#5-post-release","title":"5. Post-Release","text":"<p>Update Development Version:</p> <pre><code># Bump version in pom.xml for next development cycle\n# e.g., X.Y.Z-SNAPSHOT \u2192 X.Y.Z+1-SNAPSHOT (or whatever next version is)\n\n# Edit pom.xml, change &lt;version&gt; in parent POM\nvim pom.xml\n\ngit add pom.xml\ngit commit -m \"Bump version to next development version\"\ngit push origin python-embedded\n</code></pre> <p>Announce Release:</p> <ul> <li>Update project README if needed</li> <li>Notify users/community</li> <li>Update any integration guides</li> <li>Optionally add release to CHANGELOG.md</li> </ul>"},{"location":"development/release/#version-numbering","title":"Version Numbering","text":"<p>Python bindings follow the ArcadeDB main project version from <code>pom.xml</code>:</p> <ul> <li>Format: <code>MAJOR.MINOR.PATCH</code></li> <li>POM version: <code>X.Y.Z-SNAPSHOT</code> (development)</li> <li>Git tag: <code>vX.Y.Z-python</code> (follows git best practices with <code>v</code> prefix)</li> <li>Release tag: <code>vX.Y.Z-python</code> (GitHub Release)</li> <li>PyPI version: <code>X.Y.Z</code> (extracted automatically, no <code>v</code> prefix)</li> <li>Docs version: <code>X.Y.Z</code> (extracted from tag, no <code>v</code> prefix)</li> </ul> <p>How version is determined:</p> <ol> <li>Set in <code>pom.xml</code> root: <code>&lt;version&gt;X.Y.Z-SNAPSHOT&lt;/version&gt;</code></li> <li><code>extract_version.py</code> converts: <code>X.Y.Z-SNAPSHOT</code> \u2192 <code>X.Y.Z.dev0</code> (PEP 440)</li> <li>Create annotated tag: <code>git tag -a vX.Y.Z-python -m \"Python release vX.Y.Z\"</code></li> <li>GitHub Release tag: <code>vX.Y.Z-python</code> (with <code>v</code> prefix)</li> <li>Workflows extract: <code>vX.Y.Z-python</code> \u2192 <code>X.Y.Z</code> (strip prefix/suffix)</li> <li>Used everywhere: PyPI (<code>X.Y.Z</code>), docs (<code>/X.Y.Z/</code>)</li> </ol> <p>When to bump:</p> <ul> <li>MAJOR: Breaking API changes</li> <li>MINOR: New features, non-breaking</li> <li>PATCH: Bug fixes only</li> </ul> <p>Note: Version is only in ONE place (<code>pom.xml</code>) - everything else extracts it automatically!</p>"},{"location":"development/release/#hotfix-release","title":"Hotfix Release","text":"<p>For urgent bug fixes on a released version:</p> <pre><code># 1. Create hotfix branch from tag\ngit checkout -b hotfix/X.Y.Z+1 vX.Y.Z-python\n\n# 2. Make fixes, update version in pom.xml\nvim pom.xml  # Change to X.Y.Z+1-SNAPSHOT\n\n# 3. Test thoroughly\ncd bindings/python\n./build-all.sh full &amp;&amp; pytest\n\n# 4. Commit and create hotfix release\ngit commit -am \"Hotfix: description\"\ngit push origin hotfix/X.Y.Z+1\n\n# 5. Create annotated tag\ngit tag -a vX.Y.Z+1-python -m \"Python hotfix release vX.Y.Z+1\"\ngit push origin vX.Y.Z+1-python\n\n# 6. Create GitHub Release\ngh release create vX.Y.Z+1-python \\\n  --target hotfix/X.Y.Z+1 \\\n  --title \"Python hotfix release vX.Y.Z+1\" \\\n  --notes \"Hotfix for critical bug in X.Y.Z\"\n\n# 7. Merge back to python-embedded\ngit checkout python-embedded\ngit merge hotfix/X.Y.Z+1\ngit push origin python-embedded\n</code></pre>"},{"location":"development/release/#rolling-back-a-release","title":"Rolling Back a Release","text":"<p>If you need to roll back a broken release:</p> <p>PyPI (cannot delete, but can yank):</p> <pre><code># Install twine\npip install twine\n\n# Yank the release (makes it unavailable for new installs)\ntwine yank arcadedb-embedded-headless 25.9.1\n</code></pre> <p>Documentation (can delete version):</p> <pre><code>cd bindings/python\n\n# Install mike\npip install mike\n\n# Delete version from docs\nmike delete 25.9.1 --push\n\n# Set previous version as latest\nmike set-default 25.9.0 --push\n</code></pre> <p>GitHub Release:</p> <ol> <li>Go to Releases</li> <li>Edit the release</li> <li>Check \"Set as a pre-release\"</li> <li>Or delete the release entirely</li> </ol>"},{"location":"development/release/#troubleshooting","title":"Troubleshooting","text":""},{"location":"development/release/#pypi-upload-fails","title":"PyPI upload fails","text":"<p>Size limit exceeded:</p> <ul> <li>Full distribution might hit PyPI limits (~158 MB)</li> <li>Request size increase: https://pypi.org/help/#file-size-limit</li> <li>Or distribute via GitHub releases only</li> </ul> <p>Authentication error:</p> <ul> <li>Check GitHub environment secrets</li> <li>Verify trusted publisher configuration</li> <li>Check PyPI API tokens</li> </ul>"},{"location":"development/release/#documentation-deployment-fails","title":"Documentation deployment fails","text":"<p>mike command error:</p> <ul> <li>Ensure <code>git config</code> is set in workflow</li> <li>Check branch permissions</li> <li>Verify <code>gh-pages</code> branch exists</li> </ul> <p>Version not appearing:</p> <ul> <li>Check GitHub Actions logs</li> <li>Verify tag format: <code>python-*</code></li> <li>Manually run: <code>mike list</code> to see deployed versions</li> </ul> <p>Broken links:</p> <ul> <li>Run <code>mkdocs build --strict</code> locally first</li> <li>Check all internal links use correct paths</li> <li>Verify external URLs are accessible</li> </ul>"},{"location":"development/release/#build-failures","title":"Build failures","text":"<p>Docker build error:</p> <ul> <li>Check Docker daemon is running</li> <li>Verify Dockerfile.build syntax</li> <li>Check Maven dependencies are available</li> </ul> <p>Test failures:</p> <ul> <li>Run specific test: <code>pytest tests/test_core.py::test_name -v</code></li> <li>Check logs in <code>bindings/python/log/</code></li> <li>Verify Java JDK 11+ is available</li> </ul>"},{"location":"development/release/#automation-improvements","title":"Automation Improvements","text":"<p>Future enhancements:</p> <ul> <li> Automated changelog generation from commits</li> <li> Automated version bump on merge</li> <li> Integration tests before PyPI upload</li> <li> Automated link checking in docs</li> <li> Release notes template</li> <li> Slack/Discord notifications on release</li> </ul>"},{"location":"development/release/#see-also","title":"See Also","text":"<ul> <li>Documentation Development - Working with MkDocs</li> <li>Testing Guide - Running test suite</li> <li>Contributing Guide - Development workflow</li> <li>GitHub Actions Docs</li> <li>PyPI Publishing Guide</li> </ul>"},{"location":"development/testing/","title":"Testing","text":"<p>The ArcadeDB Python bindings have a comprehensive test suite with 41 tests covering all major functionality.</p> <p>Test Results by Distribution</p> <ul> <li>Headless: \u2705 34 passed, 7 skipped (Cypher, Gremlin, Server tests)</li> <li>Minimal: \u2705 38 passed, 3 skipped (Cypher, Gremlin tests)</li> <li>Full: \u2705 41 passed, 0 skipped (all features available)</li> </ul> <p>Tests are skipped when features aren't available in that distribution.</p>"},{"location":"development/testing/#quick-start","title":"Quick Start","text":"<pre><code># Install test dependencies\npip install pytest\n\n# Run all tests\npytest\n\n# Run specific test file\npytest tests/test_core.py\n\n# Run with verbose output\npytest -v -s\n</code></pre>"},{"location":"development/testing/#test-coverage","title":"Test Coverage","text":"<p>The test suite covers:</p> <ul> <li>\u2705 Core database operations - CRUD, transactions, queries</li> <li>\u2705 Server mode - HTTP API, multi-client access</li> <li>\u2705 Concurrency patterns - File locking, thread safety, multi-process</li> <li>\u2705 Graph operations - Vertices, edges, traversals</li> <li>\u2705 Query languages - SQL, Cypher, Gremlin</li> <li>\u2705 Vector search - HNSW indexes, similarity search</li> <li>\u2705 Data import - CSV, JSON, JSONL, Neo4j exports</li> <li>\u2705 Unicode support - International characters</li> <li>\u2705 Type conversions - Python/Java type mapping</li> <li>\u2705 Large datasets - Handling 1000+ records</li> </ul>"},{"location":"development/testing/#test-files","title":"Test Files","text":"File Tests Description <code>test_core.py</code> 13 Core database operations, CRUD, transactions, queries <code>test_server.py</code> 6 Server mode, HTTP API, multi-client access <code>test_concurrency.py</code> 4 File locking, thread safety, multi-process behavior <code>test_server_patterns.py</code> 4 Best practices for embedded + server mode <code>test_importer.py</code> 13 CSV, JSON, JSONL, Neo4j import <code>test_gremlin.py</code> 1 Gremlin query language (if available)"},{"location":"development/testing/#understanding-concurrency","title":"Understanding Concurrency","text":"<p>Multi-Process Limitations</p> <p>Multiple processes cannot access the same database file directly due to file locking. Use server mode for multi-process access.</p> <p>What works:</p> <ul> <li>\u2705 Multiple threads in the same process (thread-safe)</li> <li>\u2705 Server mode with multiple HTTP clients</li> <li>\u2705 Server mode with embedded + HTTP access simultaneously</li> </ul> <p>What doesn't work:</p> <ul> <li>\u274c Multiple processes opening the same database file</li> <li>\u274c Two Python scripts accessing the same database directly</li> </ul> <p>Solution: Use server mode for multi-process scenarios.</p>"},{"location":"development/testing/#server-access-patterns","title":"Server Access Patterns","text":"<p>There are two ways to use server mode. Pattern 2 is recommended for new projects.</p>"},{"location":"development/testing/#pattern-1-embedded-first-server-advanced","title":"Pattern 1: Embedded First \u2192 Server (Advanced)","text":"<p>Create database standalone, then expose via server:</p> <pre><code># 1. Create and populate\ndb = arcadedb.create_database(\"./mydb\")\ndb.command(\"sql\", \"CREATE DOCUMENT TYPE Person\")\n\n# 2. MUST close to release file lock\ndb.close()\n\n# 3. Move to server location\nimport shutil\nshutil.move(\"./mydb\", \"./databases/mydb\")\n\n# 4. Start server and access\nserver = arcadedb.create_server(root_path=\"./databases\")\nserver.start()\ndb = server.get_database(\"mydb\")\n</code></pre>"},{"location":"development/testing/#pattern-2-server-first-recommended","title":"Pattern 2: Server First (Recommended) \u2b50","text":"<p>Create database through server from the start:</p> <pre><code># 1. Start server\nserver = arcadedb.create_server(root_path=\"./databases\")\nserver.start()\n\n# 2. Create database through server\ndb = server.create_database(\"mydb\")\n\n# Both embedded and HTTP work immediately!\n# No manual lock management needed\n</code></pre> <p>Performance Note</p> <p>Embedded access through server has zero HTTP overhead\u2014it's a direct JVM call. HTTP is only used for external processes/clients.</p>"},{"location":"development/testing/#running-specific-tests","title":"Running Specific Tests","text":"<pre><code># Test concurrency behavior\npytest tests/test_concurrency.py -v\n\n# Test server patterns\npytest tests/test_server_patterns.py -v\n\n# Test data import\npytest tests/test_importer.py -v\n\n# Test vector search\npytest tests/test_core.py::test_vector_search -v\n\n# Run tests matching a keyword\npytest -k \"thread\" -v\npytest -k \"server\" -v\n</code></pre>"},{"location":"development/testing/#detailed-test-documentation","title":"Detailed Test Documentation","text":"<p>For comprehensive test documentation including:</p> <ul> <li>Detailed explanation of each test</li> <li>Concurrency behavior deep-dive</li> <li>Server pattern comparison</li> <li>Import functionality details</li> <li>Best practices and examples</li> </ul> <p>See the tests/README.md in the repository.</p>"},{"location":"development/troubleshooting/","title":"Troubleshooting","text":"<p>Under Construction</p> <p>This page is being developed. Check back soon!</p>"},{"location":"development/troubleshooting/#common-issues","title":"Common Issues","text":""},{"location":"development/troubleshooting/#java-not-found","title":"Java Not Found","text":"<pre><code># Install JRE\nsudo apt-get install default-jre-headless  # Ubuntu/Debian\nbrew install openjdk                        # macOS\n</code></pre>"},{"location":"development/troubleshooting/#import-errors","title":"Import Errors","text":"<pre><code>pip uninstall -y arcadedb-embedded arcadedb-embedded-headless arcadedb-embedded-minimal\npip install arcadedb-embedded-headless\n</code></pre>"},{"location":"development/troubleshooting/#coming-soon","title":"Coming Soon","text":"<ul> <li>Detailed troubleshooting guide</li> <li>Common errors and solutions</li> <li>Performance tuning</li> <li>Debug logging</li> </ul>"},{"location":"examples/basic/","title":"Basic Examples","text":"<p>This page demonstrates the fundamental operations with ArcadeDB Python bindings.</p>"},{"location":"examples/basic/#database-creation-and-basic-crud","title":"Database Creation and Basic CRUD","text":""},{"location":"examples/basic/#create-a-database","title":"Create a Database","text":"<pre><code>import arcadedb_embedded as arcadedb\n\n# Create new database\nwith arcadedb.create_database(\"/tmp/mydb\") as db:\n    print(f\"Created database at: {db.get_database_path()}\")\n    # Database automatically closed when exiting context\n</code></pre>"},{"location":"examples/basic/#open-existing-database","title":"Open Existing Database","text":"<pre><code># Open existing database\nwith arcadedb.open_database(\"/tmp/mydb\") as db:\n    result = db.query(\"sql\", \"SELECT count(*) as total FROM Person\")\n    print(f\"Total records: {result[0].get_property('total')}\")\n</code></pre> <p>For more examples, see the Quick Start Guide.</p>"},{"location":"examples/import/","title":"Import Examples","text":"<p>Under Construction</p> <p>This page is being developed. Check back soon!</p>"},{"location":"examples/import/#coming-soon","title":"Coming Soon","text":"<ul> <li>CSV import examples</li> <li>JSON/JSONL import</li> <li>Neo4j migration</li> <li>Batch processing</li> </ul>"},{"location":"examples/server/","title":"Server Examples","text":"<p>Under Construction</p> <p>This page is being developed. Check back soon!</p>"},{"location":"examples/server/#coming-soon","title":"Coming Soon","text":"<ul> <li>Starting HTTP server</li> <li>Accessing Studio UI</li> <li>REST API usage</li> <li>Security configuration</li> </ul>"},{"location":"examples/vectors/","title":"Vector Search Examples","text":"<p>Under Construction</p> <p>This page is being developed. Check back soon!</p>"},{"location":"examples/vectors/#coming-soon","title":"Coming Soon","text":"<ul> <li>Creating vector indexes</li> <li>Storing embeddings</li> <li>Similarity search</li> <li>Real-world use cases</li> </ul>"},{"location":"getting-started/distributions/","title":"Distribution Comparison","text":"<p>All three ArcadeDB Python packages are embedded - they run the database directly in your Python process via JPype. The difference is which Java JARs are bundled.</p>"},{"location":"getting-started/distributions/#quick-comparison","title":"Quick Comparison","text":"Feature Headless Minimal Full Package Name <code>arcadedb-embedded-headless</code> <code>arcadedb-embedded-minimal</code> <code>arcadedb-embedded</code> Wheel Size ~94 MB ~97 MB ~158 MB Studio Web UI \u274c No \u2705 Yes \u2705 Yes SQL \u2705 Yes \u2705 Yes \u2705 Yes Cypher \u2705 Yes \u2705 Yes \u2705 Yes Gremlin \u274c No \u274c No \u2705 Yes GraphQL \u274c No \u274c No \u2705 Yes PostgreSQL Wire \u2705 Yes \u2705 Yes \u2705 Yes MongoDB Wire \u274c No \u274c No \u2705 Yes Redis Wire \u274c No \u274c No \u2705 Yes HTTP REST API \u2705 Yes \u2705 Yes \u2705 Yes Test Results 34/41 passed 38/41 passed 41/41 passed PyPI Status \u2705 Available \u2705 Available \u23f3 Coming Soon"},{"location":"getting-started/distributions/#headless-distribution","title":"Headless Distribution","text":"<p>Best for: Production applications, minimal dependencies</p> <pre><code>pip install arcadedb-embedded-headless\n</code></pre>"},{"location":"getting-started/distributions/#whats-included","title":"What's Included","text":"<ul> <li>Core Database: SQL and Cypher query engines</li> <li>PostgreSQL Wire Protocol: Connect with PostgreSQL clients</li> <li>HTTP REST API: Programmatic access via HTTP</li> <li>All Database Models: Graph, Document, Key/Value, Vector, Time Series</li> </ul>"},{"location":"getting-started/distributions/#whats-not-included","title":"What's NOT Included","text":"<ul> <li>\u274c Studio web UI (use code/API only)</li> <li>\u274c Gremlin query language</li> <li>\u274c GraphQL support</li> <li>\u274c MongoDB/Redis wire protocols</li> </ul>"},{"location":"getting-started/distributions/#test-results","title":"Test Results","text":"<p>34 out of 41 tests pass (7 tests skipped):</p> <ul> <li>\u2705 All core database operations work</li> <li>\u2705 SQL and Cypher queries work</li> <li>\u23ed\ufe0f Cypher tests skipped (Cypher engine not in headless)</li> <li>\u23ed\ufe0f Gremlin tests skipped (Gremlin not available)</li> <li>\u23ed\ufe0f Server tests skipped (HTTP server not included)</li> </ul>"},{"location":"getting-started/distributions/#use-cases","title":"Use Cases","text":"<ul> <li>Production Python applications</li> <li>Headless servers and containers</li> <li>Applications that don't need visual debugging</li> <li>Minimal dependency footprint</li> </ul>"},{"location":"getting-started/distributions/#example","title":"Example","text":"<pre><code>import arcadedb_embedded as arcadedb\n\n# Direct database access - no UI needed\nwith arcadedb.create_database(\"/tmp/mydb\") as db:\n    db.command(\"sql\", \"CREATE DOCUMENT TYPE User\")\n    with db.transaction():\n        db.command(\"sql\", \"INSERT INTO User SET name = 'Alice'\")\n\n    result = db.query(\"sql\", \"SELECT FROM User\")\n    print(f\"Users: {len(result)}\")\n</code></pre>"},{"location":"getting-started/distributions/#minimal-distribution","title":"Minimal Distribution","text":"<p>Best for: Development, learning, visual debugging</p> <pre><code>pip install arcadedb-embedded-minimal\n</code></pre>"},{"location":"getting-started/distributions/#whats-included_1","title":"What's Included","text":"<p>Everything in Headless plus:</p> <ul> <li>\u2705 Studio Web UI (~2 MB): Visual database explorer</li> <li>Query editor with syntax highlighting</li> <li>Schema visualization</li> <li>Data browsing and editing</li> <li>Graph visualization</li> </ul>"},{"location":"getting-started/distributions/#test-results_1","title":"Test Results","text":"<p>38 out of 41 tests pass (3 tests skipped):</p> <ul> <li>\u2705 All core database operations work</li> <li>\u2705 SQL and Cypher queries work</li> <li>\u2705 HTTP server and Studio UI work</li> <li>\u23ed\ufe0f Gremlin tests skipped (Gremlin not available)</li> </ul>"},{"location":"getting-started/distributions/#use-cases_1","title":"Use Cases","text":"<ul> <li>Development and testing</li> <li>Learning ArcadeDB features</li> <li>Visual database exploration</li> <li>Debugging queries and data</li> </ul>"},{"location":"getting-started/distributions/#accessing-studio-ui","title":"Accessing Studio UI","text":"<pre><code>from arcadedb_embedded import create_server\n\n# Start HTTP server with Studio UI\nserver = create_server(\"./databases\")\nserver.start()\n\n# Studio UI available at: http://localhost:2480\n# Create databases, run queries, visualize data\n\n# When done\nserver.stop()\n</code></pre> <p>Studio in Browser</p> <p>Once the server starts, open your browser to <code>http://localhost:2480</code> to access the Studio UI.</p>"},{"location":"getting-started/distributions/#full-distribution","title":"Full Distribution","text":"<p>Best for: Gremlin graphs, GraphQL APIs, MongoDB/Redis compatibility</p> <pre><code>pip install arcadedb-embedded\n</code></pre> <p>Coming Soon</p> <p>The full distribution is pending PyPI size limit approval. Will be available soon!</p>"},{"location":"getting-started/distributions/#whats-included_2","title":"What's Included","text":"<p>Everything in Minimal plus:</p> <ul> <li>\u2705 Gremlin (~60 MB): Apache TinkerPop graph traversal language</li> <li>\u2705 GraphQL (~4 MB): GraphQL query endpoint</li> <li>\u2705 MongoDB Wire Protocol: Connect with MongoDB clients</li> <li>\u2705 Redis Wire Protocol: Connect with Redis clients</li> </ul>"},{"location":"getting-started/distributions/#test-results_2","title":"Test Results","text":"<p>41 out of 41 tests pass (0 tests skipped):</p> <ul> <li>\u2705 All core database operations work</li> <li>\u2705 SQL, Cypher, and Gremlin queries work</li> <li>\u2705 HTTP server and Studio UI work</li> <li>\u2705 All features available</li> </ul>"},{"location":"getting-started/distributions/#use-cases_2","title":"Use Cases","text":"<ul> <li>Applications using Gremlin graph traversals</li> <li>GraphQL API integration</li> <li>MongoDB client compatibility</li> <li>Redis client compatibility</li> <li>Complete feature set</li> </ul>"},{"location":"getting-started/distributions/#gremlin-example","title":"Gremlin Example","text":"<pre><code>import arcadedb_embedded as arcadedb\n\nwith arcadedb.create_database(\"/tmp/graphdb\") as db:\n    # Create vertices and edges\n    db.command(\"sql\", \"CREATE VERTEX TYPE Person\")\n    db.command(\"sql\", \"CREATE EDGE TYPE Knows\")\n\n    with db.transaction():\n        db.command(\"sql\", \"CREATE VERTEX Person SET name = 'Alice'\")\n        db.command(\"sql\", \"CREATE VERTEX Person SET name = 'Bob'\")\n        db.command(\"sql\", \"\"\"\n            CREATE EDGE Knows FROM \n                (SELECT FROM Person WHERE name = 'Alice') \n            TO \n                (SELECT FROM Person WHERE name = 'Bob')\n        \"\"\")\n\n    # Use Gremlin for graph traversals\n    result = db.query(\"gremlin\", \"g.V().has('name', 'Alice').out('Knows').values('name')\")\n    print(f\"Alice knows: {list(result)}\")  # ['Bob']\n</code></pre>"},{"location":"getting-started/distributions/#same-import-for-all","title":"Same Import for All","text":"<p>Regardless of distribution, the import is always:</p> <pre><code>import arcadedb_embedded as arcadedb\n</code></pre> <p>This means you can:</p> <ul> <li>Develop with Minimal (Studio UI for debugging)</li> <li>Deploy with Headless (smaller, production-ready)</li> <li>Upgrade to Full (when you need Gremlin/GraphQL)</li> </ul> <p>No code changes required!</p>"},{"location":"getting-started/distributions/#which-distribution-should-you-choose","title":"Which Distribution Should You Choose?","text":"<p>Start with Headless</p> <p>For most Python applications:</p> <ul> <li>Production-ready and tested</li> <li>Smallest size (~94 MB)</li> <li>All core features included</li> <li>Available now on PyPI</li> </ul> <p>Upgrade to Minimal for Development</p> <p>If you need visual debugging:</p> <ul> <li>Only ~3 MB larger</li> <li>Studio UI for exploration</li> <li>Great for learning</li> <li>Available now on PyPI</li> </ul> <p>Wait for Full if Needed</p> <p>Only if you specifically need:</p> <ul> <li>Gremlin graph traversals</li> <li>GraphQL endpoint</li> <li>MongoDB/Redis compatibility</li> <li>Coming soon to PyPI!</li> </ul>"},{"location":"getting-started/distributions/#size-breakdown","title":"Size Breakdown","text":""},{"location":"getting-started/distributions/#headless-94-mb","title":"Headless (~94 MB)","text":"<ul> <li>Core Database: ~60 MB</li> <li>SQL/Cypher Engines: ~15 MB</li> <li>PostgreSQL Wire: ~5 MB</li> <li>HTTP Server: ~10 MB</li> <li>Dependencies: ~4 MB</li> </ul>"},{"location":"getting-started/distributions/#minimal-97-mb","title":"Minimal (~97 MB)","text":"<ul> <li>Everything in Headless: ~94 MB</li> <li>Studio UI: ~3 MB</li> </ul>"},{"location":"getting-started/distributions/#full-158-mb","title":"Full (~158 MB)","text":"<ul> <li>Everything in Minimal: ~97 MB</li> <li>Gremlin (TinkerPop): ~60 MB</li> <li>GraphQL: ~4 MB</li> <li>MongoDB/Redis Wire: ~2 MB</li> </ul>"},{"location":"getting-started/distributions/#installation-tips","title":"Installation Tips","text":""},{"location":"getting-started/distributions/#switch-distributions","title":"Switch Distributions","text":"<p>Uninstall the current distribution first:</p> <pre><code># Uninstall any existing distribution\npip uninstall arcadedb-embedded arcadedb-embedded-headless arcadedb-embedded-minimal\n\n# Install the one you want\npip install arcadedb-embedded-headless\n</code></pre>"},{"location":"getting-started/distributions/#check-installed-distribution","title":"Check Installed Distribution","text":"<pre><code>import arcadedb_embedded as arcadedb\nprint(f\"Version: {arcadedb.__version__}\")\n\n# Check which JARs are available\nfrom arcadedb_embedded.jvm import get_jvm\njvm = get_jvm()\n# JVM will load JARs from your installed distribution\n</code></pre>"},{"location":"getting-started/distributions/#next-steps","title":"Next Steps","text":"<ul> <li>Installation Guide - Detailed install instructions</li> <li>Quick Start - Get started in 5 minutes</li> <li>Server Mode - Using the HTTP server with Studio UI</li> <li>Gremlin Guide - Graph traversals (Full distribution)</li> </ul>"},{"location":"getting-started/installation/","title":"Installation","text":""},{"location":"getting-started/installation/#choose-your-distribution","title":"Choose Your Distribution","text":"<p>All three packages are embedded - they run ArcadeDB directly in your Python process. Choose based on which features you need:</p> Headless (Recommended)MinimalFull <p>Core database functionality - perfect for production</p> <pre><code>pip install arcadedb-embedded-headless\n</code></pre> <ul> <li>\u2705 Size: ~94MB</li> <li>\u2705 SQL, Cypher queries</li> <li>\u2705 PostgreSQL wire protocol</li> <li>\u2705 HTTP REST API</li> <li>\u274c No Studio UI</li> </ul> <p>Best for:</p> <ul> <li>Production applications</li> <li>Python applications where you don't need the web UI</li> <li>Minimal dependencies</li> </ul> <p>Adds Studio web UI for development</p> <pre><code>pip install arcadedb-embedded-minimal\n</code></pre> <ul> <li>\u2705 Size: ~97MB</li> <li>\u2705 Everything in Headless</li> <li>\u2705 Studio web UI for visual debugging</li> </ul> <p>Best for:</p> <ul> <li>Development and learning</li> <li>Visual database exploration</li> <li>Debugging with the Studio UI</li> </ul> <p>Adds Gremlin + GraphQL support</p> <pre><code>pip install arcadedb-embedded\n</code></pre> <p>Coming Soon</p> <p>Full distribution is pending PyPI size limit approval. Will be available soon!</p> <ul> <li>\u2705 Size: ~158MB</li> <li>\u2705 Everything in Minimal</li> <li>\u2705 Gremlin query language</li> <li>\u2705 GraphQL support</li> <li>\u2705 MongoDB &amp; Redis wire protocols</li> </ul> <p>Best for:</p> <ul> <li>Applications using Gremlin graph queries</li> <li>GraphQL integration</li> <li>MongoDB/Redis compatibility</li> </ul>"},{"location":"getting-started/installation/#same-import-for-all-distributions","title":"Same Import for All Distributions","text":"<p>Regardless of which distribution you install, the import is always:</p> <pre><code>import arcadedb_embedded as arcadedb\n</code></pre> <p>This means you can switch between distributions without changing your code!</p>"},{"location":"getting-started/installation/#requirements","title":"Requirements","text":""},{"location":"getting-started/installation/#java-runtime-environment-jre","title":"Java Runtime Environment (JRE)","text":"<p>Java Required</p> <p>You need Java Runtime Environment (JRE) 11+ installed. The wheels bundle all JAR files, but need a JVM to run them.</p> Ubuntu/DebianmacOSWindows <pre><code>sudo apt-get update\nsudo apt-get install default-jre-headless\n</code></pre> <p>Verify installation:</p> <pre><code>java -version\n# Should show: openjdk version \"11.0.x\" or higher\n</code></pre> <pre><code>brew install openjdk\n</code></pre> <p>Verify installation:</p> <pre><code>java -version\n# Should show: openjdk version \"11.0.x\" or higher\n</code></pre> <ol> <li>Download OpenJDK from Adoptium</li> <li>Run the installer (choose JRE, not full JDK)</li> <li>Verify installation in Command Prompt:</li> </ol> <pre><code>java -version\n</code></pre>"},{"location":"getting-started/installation/#python-version","title":"Python Version","text":"<ul> <li>Supported: Python 3.8, 3.9, 3.10, 3.11, 3.12</li> <li>Recommended: Python 3.10 or higher</li> </ul>"},{"location":"getting-started/installation/#dependencies","title":"Dependencies","text":"<p>All Python dependencies are automatically installed:</p> <ul> <li>JPype1 &gt;= 1.5.0 (Java-Python bridge)</li> <li>typing-extensions (for Python &lt; 3.10)</li> </ul>"},{"location":"getting-started/installation/#verify-installation","title":"Verify Installation","text":"<p>After installation, verify everything works:</p> <pre><code>import arcadedb_embedded as arcadedb\nprint(f\"ArcadeDB Python bindings version: {arcadedb.__version__}\")\n</code></pre> <p>Expected output (version will match what you installed):</p> <pre><code>ArcadeDB Python bindings version: X.Y.Z\n</code></pre>"},{"location":"getting-started/installation/#building-from-source","title":"Building from Source","text":"<p>If you want to build the wheels yourself:</p> <p>Docker Required</p> <p>Building requires Docker - it handles all dependencies (Java, Maven, Python build tools).</p> <pre><code>cd bindings/python/\n\n# Build all three distributions\n./build-all.sh\n\n# Or build specific distribution\n./build-all.sh headless    # ~94 MB\n./build-all.sh minimal     # ~97 MB\n./build-all.sh full        # ~158 MB\n</code></pre> <p>Built wheels will be in <code>dist/</code>:</p> <pre><code>dist/\n\u251c\u2500\u2500 arcadedb_embedded_headless-X.Y.Z-py3-none-any.whl\n\u251c\u2500\u2500 arcadedb_embedded_minimal-X.Y.Z-py3-none-any.whl\n\u2514\u2500\u2500 arcadedb_embedded_full-X.Y.Z-py3-none-any.whl\n</code></pre> <p>Install locally (version extracted from <code>pom.xml</code>):</p> <pre><code>pip install dist/arcadedb_embedded_headless-*.whl\n</code></pre>"},{"location":"getting-started/installation/#troubleshooting","title":"Troubleshooting","text":""},{"location":"getting-started/installation/#java-not-found","title":"Java Not Found","text":"<p>If you get <code>Java runtime not found</code> error:</p> <ol> <li>Install JRE (see requirements above)</li> <li>Set <code>JAVA_HOME</code> environment variable:</li> </ol> <pre><code># Linux/macOS\nexport JAVA_HOME=/usr/lib/jvm/default-java\n\n# Windows\nset JAVA_HOME=C:\\Program Files\\Java\\jdk-11\n</code></pre>"},{"location":"getting-started/installation/#import-errors","title":"Import Errors","text":"<p>If <code>import arcadedb_embedded</code> fails:</p> <pre><code># Uninstall all distributions first\npip uninstall arcadedb-embedded arcadedb-embedded-headless arcadedb-embedded-minimal\n\n# Reinstall chosen distribution\npip install arcadedb-embedded-headless\n</code></pre>"},{"location":"getting-started/installation/#version-conflicts","title":"Version Conflicts","text":"<p>If you see version conflicts with JPype:</p> <pre><code># Upgrade JPype\npip install --upgrade JPype1\n\n# Reinstall ArcadeDB\npip install --force-reinstall arcadedb-embedded-headless\n</code></pre>"},{"location":"getting-started/installation/#next-steps","title":"Next Steps","text":"<ul> <li>Quick Start Guide - Get started in 5 minutes</li> <li>Distribution Comparison - Detailed comparison</li> <li>User Guide - Learn all features</li> </ul>"},{"location":"getting-started/quickstart/","title":"Quick Start","text":"<p>Get up and running with ArcadeDB Python bindings in 5 minutes!</p>"},{"location":"getting-started/quickstart/#installation","title":"Installation","text":"<p>First, install the headless distribution (recommended for getting started):</p> <pre><code>pip install arcadedb-embedded-headless\n</code></pre> <p>Java Required</p> <p>Make sure you have Java 11+ installed: <pre><code>java -version\n</code></pre> If not installed, see Installation Guide.</p>"},{"location":"getting-started/quickstart/#your-first-database","title":"Your First Database","text":""},{"location":"getting-started/quickstart/#1-create-a-database","title":"1. Create a Database","text":"<pre><code>import arcadedb_embedded as arcadedb\n\n# Create database (context manager for automatic cleanup)\nwith arcadedb.create_database(\"/tmp/quickstart\") as db:\n    print(f\"Created database at: {db.get_database_path()}\")\n</code></pre>"},{"location":"getting-started/quickstart/#2-create-schema","title":"2. Create Schema","text":"<pre><code>with arcadedb.create_database(\"/tmp/quickstart\") as db:\n    # Create a document type\n    db.command(\"sql\", \"CREATE DOCUMENT TYPE Person\")\n\n    # Create a property\n    db.command(\"sql\", \"ALTER TYPE Person CREATE PROPERTY name STRING\")\n    db.command(\"sql\", \"ALTER TYPE Person CREATE PROPERTY age INTEGER\")\n\n    print(\"Schema created!\")\n</code></pre>"},{"location":"getting-started/quickstart/#3-insert-data","title":"3. Insert Data","text":"<p>All writes must be in a transaction:</p> <pre><code>with arcadedb.create_database(\"/tmp/quickstart\") as db:\n    db.command(\"sql\", \"CREATE DOCUMENT TYPE Person\")\n\n    # Use transaction for writes\n    with db.transaction():\n        db.command(\"sql\", \"INSERT INTO Person SET name = 'Alice', age = 30\")\n        db.command(\"sql\", \"INSERT INTO Person SET name = 'Bob', age = 25\")\n        db.command(\"sql\", \"INSERT INTO Person SET name = 'Charlie', age = 35\")\n\n    print(\"Inserted 3 records\")\n</code></pre> <p>Transactions</p> <p>Always use <code>with db.transaction():</code> for INSERT, UPDATE, DELETE operations.</p>"},{"location":"getting-started/quickstart/#4-query-data","title":"4. Query Data","text":"<pre><code>with arcadedb.create_database(\"/tmp/quickstart\") as db:\n    # Setup (abbreviated)\n    db.command(\"sql\", \"CREATE DOCUMENT TYPE Person\")\n    with db.transaction():\n        db.command(\"sql\", \"INSERT INTO Person SET name = 'Alice', age = 30\")\n        db.command(\"sql\", \"INSERT INTO Person SET name = 'Bob', age = 25\")\n\n    # Query data\n    result = db.query(\"sql\", \"SELECT FROM Person WHERE age &gt; 25\")\n\n    for record in result:\n        name = record.get_property('name')\n        age = record.get_property('age')\n        print(f\"Name: {name}, Age: {age}\")\n</code></pre> <p>Output: <pre><code>Name: Alice, Age: 30\n</code></pre></p>"},{"location":"getting-started/quickstart/#complete-example","title":"Complete Example","text":"<p>Here's a complete working example:</p> <pre><code>import arcadedb_embedded as arcadedb\n\ndef main():\n    # Create database\n    with arcadedb.create_database(\"/tmp/quickstart\") as db:\n        # Create schema\n        db.command(\"sql\", \"CREATE DOCUMENT TYPE Person\")\n        db.command(\"sql\", \"ALTER TYPE Person CREATE PROPERTY name STRING\")\n        db.command(\"sql\", \"ALTER TYPE Person CREATE PROPERTY age INTEGER\")\n        db.command(\"sql\", \"CREATE INDEX Person_name ON Person (name) NOTUNIQUE\")\n\n        # Insert data (in transaction)\n        with db.transaction():\n            db.command(\"sql\", \"\"\"\n                INSERT INTO Person SET \n                    name = 'Alice', \n                    age = 30,\n                    email = 'alice@example.com'\n            \"\"\")\n            db.command(\"sql\", \"\"\"\n                INSERT INTO Person SET \n                    name = 'Bob', \n                    age = 25,\n                    email = 'bob@example.com'\n            \"\"\")\n            db.command(\"sql\", \"\"\"\n                INSERT INTO Person SET \n                    name = 'Charlie', \n                    age = 35,\n                    email = 'charlie@example.com'\n            \"\"\")\n\n        print(\"\u2705 Inserted 3 records\")\n\n        # Query all\n        print(\"\\n\ud83d\udccb All people:\")\n        result = db.query(\"sql\", \"SELECT FROM Person ORDER BY age\")\n        for record in result:\n            print(f\"  - {record.get_property('name')}, age {record.get_property('age')}\")\n\n        # Query with filter\n        print(\"\\n\ud83d\udd0d People over 25:\")\n        result = db.query(\"sql\", \"SELECT FROM Person WHERE age &gt; 25 ORDER BY age\")\n        for record in result:\n            print(f\"  - {record.get_property('name')}, age {record.get_property('age')}\")\n\n        # Count\n        result = db.query(\"sql\", \"SELECT count(*) as total FROM Person\")\n        total = result[0].get_property('total')\n        print(f\"\\n\ud83d\udcca Total people: {total}\")\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <p>Output: <pre><code>\u2705 Inserted 3 records\n\n\ud83d\udccb All people:\n  - Bob, age 25\n  - Alice, age 30\n  - Charlie, age 35\n\n\ud83d\udd0d People over 25:\n  - Alice, age 30\n  - Charlie, age 35\n\n\ud83d\udcca Total people: 3\n</code></pre></p>"},{"location":"getting-started/quickstart/#key-concepts","title":"Key Concepts","text":""},{"location":"getting-started/quickstart/#context-managers","title":"Context Managers","text":"<p>Always use <code>with</code> statements for automatic cleanup:</p> <pre><code># \u2705 Good - automatic cleanup\nwith arcadedb.create_database(\"/tmp/mydb\") as db:\n    # Use database\n    pass\n# Database automatically closed\n\n# \u274c Avoid - manual cleanup required\ndb = arcadedb.create_database(\"/tmp/mydb\")\n# Use database\ndb.close()  # Easy to forget!\n</code></pre>"},{"location":"getting-started/quickstart/#transactions","title":"Transactions","text":"<p>All writes require a transaction:</p> <pre><code># \u2705 Good - in transaction\nwith db.transaction():\n    db.command(\"sql\", \"INSERT INTO Person SET name = 'Alice'\")\n\n# \u274c Will fail - no transaction\ndb.command(\"sql\", \"INSERT INTO Person SET name = 'Alice'\")\n</code></pre> <p>Read-Only Operations</p> <p><code>db.query()</code> doesn't require a transaction - only <code>db.command()</code> for writes.</p>"},{"location":"getting-started/quickstart/#query-languages","title":"Query Languages","text":"<p>ArcadeDB supports multiple query languages:</p> SQLCypherMongoDBGremlin (Full only) <pre><code>result = db.query(\"sql\", \"SELECT FROM Person WHERE age &gt; 25\")\n</code></pre> <pre><code>result = db.query(\"cypher\", \"MATCH (p:Person) WHERE p.age &gt; 25 RETURN p\")\n</code></pre> <pre><code>result = db.query(\"mongo\", \"{ find: 'Person', filter: { age: { $gt: 25 } } }\")\n</code></pre> <pre><code># Only in arcadedb-embedded (full distribution)\nresult = db.query(\"gremlin\", \"g.V().has('Person', 'age', gt(25))\")\n</code></pre>"},{"location":"getting-started/quickstart/#next-steps","title":"Next Steps","text":"<p>Now that you've created your first database, explore more features:</p> <ul> <li> <p> Core Operations</p> <p>Learn about database management, queries, and transactions</p> </li> <li> <p> Vector Search</p> <p>Store and query embeddings with HNSW indexing</p> </li> <li> <p> Graph Operations</p> <p>Work with vertices, edges, and graph traversals</p> </li> <li> <p> Import Data</p> <p>Bulk import from CSV, JSON, JSONL, Neo4j</p> </li> </ul>"},{"location":"getting-started/quickstart/#common-patterns","title":"Common Patterns","text":""},{"location":"getting-started/quickstart/#working-with-existing-database","title":"Working with Existing Database","text":"<pre><code># Open existing database\nwith arcadedb.open_database(\"/tmp/quickstart\") as db:\n    result = db.query(\"sql\", \"SELECT FROM Person\")\n    print(f\"Found {len(result)} records\")\n</code></pre>"},{"location":"getting-started/quickstart/#batch-inserts","title":"Batch Inserts","text":"<pre><code>with db.transaction():\n    for i in range(100):\n        db.command(\"sql\", f\"INSERT INTO Person SET name = 'User{i}', age = {20 + i}\")\n</code></pre>"},{"location":"getting-started/quickstart/#error-handling","title":"Error Handling","text":"<pre><code>from arcadedb_embedded import ArcadeDBError\n\ntry:\n    with arcadedb.create_database(\"/tmp/mydb\") as db:\n        db.command(\"sql\", \"INVALID SQL\")\nexcept ArcadeDBError as e:\n    print(f\"Database error: {e}\")\n</code></pre>"},{"location":"getting-started/quickstart/#need-help","title":"Need Help?","text":"<ul> <li>Examples: Check Examples for more code samples</li> <li>API Reference: See Database API for all methods</li> <li>Troubleshooting: Visit Troubleshooting Guide</li> </ul>"},{"location":"guide/graphs/","title":"Graph Operations","text":"<p>cat &gt; /home/tk/repos/arcadedb/bindings/python/docs/guide/import.md &lt;&lt; 'EOF'</p>"},{"location":"guide/graphs/#data-import","title":"Data Import","text":"<p>cat &gt; /home/tk/repos/arcadedb/bindings/python/docs/guide/vectors.md &lt;&lt; 'EOF'</p>"},{"location":"guide/graphs/#vector-search","title":"Vector Search","text":"<p>cat &gt; /home/tk/repos/arcadedb/bindings/python/docs/guide/server.md &lt;&lt; 'EOF'</p>"},{"location":"guide/graphs/#server-mode","title":"Server Mode","text":"<p>cd /home/tk/repos/arcadedb/bindings/python/docs &amp;&amp; mkdir -p guide/core api examples development! info \"Under Construction\"     This page is being developed. Check back soon!</p>"},{"location":"guide/graphs/#coming-soon","title":"Coming Soon","text":"<ul> <li>HTTP server setup</li> <li>Studio UI access</li> <li>Server configuration</li> <li>Security</li> </ul> <p>See Quick Start for now. EOF! info \"Under Construction\"     This page is being developed. Check back soon!</p>"},{"location":"guide/graphs/#coming-soon_1","title":"Coming Soon","text":"<ul> <li>HNSW indexing</li> <li>Similarity search</li> <li>Embeddings storage</li> </ul> <p>See Examples for now. EOF! info \"Under Construction\"     This page is being developed. Check back soon!</p>"},{"location":"guide/graphs/#coming-soon_2","title":"Coming Soon","text":"<ul> <li>CSV import</li> <li>JSON/JSONL import</li> <li>Neo4j import</li> <li>Batch processing</li> </ul> <p>See Examples for now. EOF! info \"Under Construction\"     This page is being developed. Check back soon!</p>"},{"location":"guide/graphs/#coming-soon_3","title":"Coming Soon","text":"<ul> <li>Vertices and edges</li> <li>Graph traversals</li> <li>Cypher queries</li> <li>Gremlin (Full dist)</li> </ul> <p>See Quick Start for now.</p>"},{"location":"guide/import/","title":"Data Import","text":"<p>cat &gt; /home/tk/repos/arcadedb/bindings/python/docs/guide/vectors.md &lt;&lt; 'EOF'</p>"},{"location":"guide/import/#vector-search","title":"Vector Search","text":"<p>cat &gt; /home/tk/repos/arcadedb/bindings/python/docs/guide/server.md &lt;&lt; 'EOF'</p>"},{"location":"guide/import/#server-mode","title":"Server Mode","text":"<p>cd /home/tk/repos/arcadedb/bindings/python/docs &amp;&amp; mkdir -p guide/core api examples development! info \"Under Construction\"     This page is being developed. Check back soon!</p>"},{"location":"guide/import/#coming-soon","title":"Coming Soon","text":"<ul> <li>HTTP server setup</li> <li>Studio UI access</li> <li>Server configuration</li> <li>Security</li> </ul> <p>See Quick Start for now. EOF! info \"Under Construction\"     This page is being developed. Check back soon!</p>"},{"location":"guide/import/#coming-soon_1","title":"Coming Soon","text":"<ul> <li>HNSW indexing</li> <li>Similarity search</li> <li>Embeddings storage</li> </ul> <p>See Examples for now. EOF! info \"Under Construction\"     This page is being developed. Check back soon!</p>"},{"location":"guide/import/#coming-soon_2","title":"Coming Soon","text":"<ul> <li>CSV import</li> <li>JSON/JSONL import</li> <li>Neo4j import</li> <li>Batch processing</li> </ul> <p>See Examples for now.</p>"},{"location":"guide/server/","title":"Server Mode","text":"<p>cd /home/tk/repos/arcadedb/bindings/python/docs &amp;&amp; mkdir -p guide/core api examples development! info \"Under Construction\"     This page is being developed. Check back soon!</p>"},{"location":"guide/server/#coming-soon","title":"Coming Soon","text":"<ul> <li>HTTP server setup</li> <li>Studio UI access</li> <li>Server configuration</li> <li>Security</li> </ul> <p>See Quick Start for now.</p>"},{"location":"guide/vectors/","title":"Vector Search","text":"<p>cat &gt; /home/tk/repos/arcadedb/bindings/python/docs/guide/server.md &lt;&lt; 'EOF'</p>"},{"location":"guide/vectors/#server-mode","title":"Server Mode","text":"<p>cd /home/tk/repos/arcadedb/bindings/python/docs &amp;&amp; mkdir -p guide/core api examples development! info \"Under Construction\"     This page is being developed. Check back soon!</p>"},{"location":"guide/vectors/#coming-soon","title":"Coming Soon","text":"<ul> <li>HTTP server setup</li> <li>Studio UI access</li> <li>Server configuration</li> <li>Security</li> </ul> <p>See Quick Start for now. EOF! info \"Under Construction\"     This page is being developed. Check back soon!</p>"},{"location":"guide/vectors/#coming-soon_1","title":"Coming Soon","text":"<ul> <li>HNSW indexing</li> <li>Similarity search</li> <li>Embeddings storage</li> </ul> <p>See Examples for now.</p>"},{"location":"guide/core/database/","title":"Database Management","text":"<p>Under Construction</p> <p>This page is being developed. Check back soon for comprehensive database management documentation.</p>"},{"location":"guide/core/database/#coming-soon","title":"Coming Soon","text":"<ul> <li>Database lifecycle (create, open, close, drop)</li> <li>Configuration options</li> <li>Resource management</li> <li>Best practices</li> </ul> <p>For now, see the Quick Start Guide for basic usage.</p>"},{"location":"guide/core/queries/","title":"Queries","text":"<p>Under Construction</p> <p>This page is being developed. Check back soon for comprehensive query documentation.</p>"},{"location":"guide/core/queries/#coming-soon","title":"Coming Soon","text":"<ul> <li>SQL queries</li> <li>Cypher queries</li> <li>MongoDB syntax</li> <li>Query optimization</li> </ul> <p>For now, see the Quick Start Guide.</p>"},{"location":"guide/core/transactions/","title":"Transactions","text":"<p>Under Construction</p> <p>This page is being developed. Check back soon for comprehensive transaction documentation.</p>"},{"location":"guide/core/transactions/#coming-soon","title":"Coming Soon","text":"<ul> <li>Transaction context managers</li> <li>ACID guarantees</li> <li>Isolation levels</li> <li>Error handling</li> </ul> <p>For now, see the Quick Start Guide.</p>"}]}